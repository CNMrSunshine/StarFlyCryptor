#include <windows.h>
#include "syscalls.h"
#include "nt.h"
/*========================================
 以下是飞星的相关定义和声明
========================================*/
extern NTSTATUS status;
extern DWORD o_mode;
extern NTSTATUS SFNtAccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiaredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PBOOLEAN AccessStatus);
extern NTSTATUS SFNtWorkerFactoryWorkerReady(HANDLE WorkerFactoryHandle);
extern NTSTATUS SFNtAcceptConnectPort(PHANDLE ServerPortHandle, ULONG AlternativeReceivePortHandle, PPORT_MESSAGE ConnectionReply, BOOLEAN AcceptConnection, PPORT_SECTION_WRITE ServerSharedMemory, PPORT_SECTION_READ ClientSharedMemory);
extern NTSTATUS SFNtMapUserPhysicalPagesScatter(PVOID VirtualAddresses, PULONG NumberOfPages, PULONG UserPfnArray);
extern NTSTATUS SFNtWaitForSingleObject(HANDLE ObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER TimeOut);
extern NTSTATUS SFNtCallbackReturn(PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);
extern NTSTATUS SFNtReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
extern NTSTATUS SFNtDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
extern NTSTATUS SFNtWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
extern NTSTATUS SFNtRemoveIoCompletion(HANDLE IoCompletionHandle, PULONG KeyContext, PULONG ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtReleaseSemaphore(HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);
extern NTSTATUS SFNtReplyWaitReceivePort(HANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);
extern NTSTATUS SFNtReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
extern NTSTATUS SFNtSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);
extern NTSTATUS SFNtSetEvent(HANDLE EventHandle, PULONG PreviousState);
extern NTSTATUS SFNtClose(HANDLE Handle);
extern NTSTATUS SFNtQueryObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInpformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
extern NTSTATUS SFNtOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtEnumerateValueKey(HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
extern NTSTATUS SFNtFindAtom(PWSTR AtomName, ULONG Length, PUSHORT Atom);
extern NTSTATUS SFNtQueryDefaultLocale(BOOLEAN UserProfile, PLCID DefaultLocaleId);
extern NTSTATUS SFNtQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
extern NTSTATUS SFNtQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
extern NTSTATUS SFNtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
extern NTSTATUS SFNtQueryInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtWaitForMultipleObjects32(ULONG ObjectCount, PHANDLE Handles, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtWriteFileGather(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
extern NTSTATUS SFNtCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
extern NTSTATUS SFNtFreeVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
extern NTSTATUS SFNtImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message);
extern NTSTATUS SFNtReleaseMutant(HANDLE MutantHandle, PULONG PreviousCount);
extern NTSTATUS SFNtQueryInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtRequestWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);
extern NTSTATUS SFNtQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
extern NTSTATUS SFNtOpenThreadToken(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
extern NTSTATUS SFNtQueryInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
extern NTSTATUS SFNtSetInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
extern NTSTATUS SFNtMapViewOfSection(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID BaseAddress, ULONG ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
extern NTSTATUS SFNtAccessCheckAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PBOOLEAN AccessStatus, PBOOLEAN GenerateOnClose);
extern NTSTATUS SFNtUnmapViewOfSection(HANDLE ProcessHandle, PVOID BaseAddress);
extern NTSTATUS SFNtReplyWaitReceivePortEx(HANDLE PortHandle, PULONG PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtTerminateProcess(HANDLE ProcessHandle, NTSTATUS ExitStatus);
extern NTSTATUS SFNtSetEventBoostPriority(HANDLE EventHandle);
extern NTSTATUS SFNtReadFileScatter(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
extern NTSTATUS SFNtOpenThreadTokenEx(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);
extern NTSTATUS SFNtOpenProcessTokenEx(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);
extern NTSTATUS SFNtQueryPerformanceCounter(PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);
extern NTSTATUS SFNtEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
extern NTSTATUS SFNtOpenFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
extern NTSTATUS SFNtDelayExecution(BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);
extern NTSTATUS SFNtQueryDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);
extern NTSTATUS SFNtQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtOpenSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtQueryTimer(HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
extern NTSTATUS SFNtWriteVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToWrite, PSIZE_T NumberOfBytesWritten);
extern NTSTATUS SFNtCloseObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
extern NTSTATUS SFNtDuplicateObject(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
extern NTSTATUS SFNtQueryAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);
extern NTSTATUS SFNtClearEvent(HANDLE EventHandle);
extern NTSTATUS SFNtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
extern NTSTATUS SFNtOpenEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtAdjustPrivilegesToken(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);
extern NTSTATUS SFNtDuplicateToken(HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);
extern NTSTATUS SFNtContinue(PCONTEXT ContextRecord, BOOLEAN TestAlert);
extern NTSTATUS SFNtQueryDefaultUILanguage(PLANGID DefaultUILanguageId);
extern NTSTATUS SFNtQueueApcThread(HANDLE ThreadHandle, PKNORMAL_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
extern NTSTATUS SFNtYieldExecution();
extern NTSTATUS SFNtAddAtom(PWSTR AtomName, ULONG Length, PUSHORT Atom);
extern NTSTATUS SFNtCreateEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);
extern NTSTATUS SFNtQueryVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FSINFOCLASS FsInformationClass);
extern NTSTATUS SFNtCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
extern NTSTATUS SFNtFlushBuffersFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtApphelpCacheControl(APPHELPCACHESERVICECLASS Service, PVOID ServiceData);
extern NTSTATUS SFNtCreateProcessEx(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);
extern NTSTATUS SFNtCreateThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PUSER_STACK InitialTeb, BOOLEAN CreateSuspended);
extern NTSTATUS SFNtIsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle);
extern NTSTATUS SFNtProtectVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect);
extern NTSTATUS SFNtQuerySection(HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, ULONG SectionInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
extern NTSTATUS SFNtTerminateThread(HANDLE ThreadHandle, NTSTATUS ExitStatus);
extern NTSTATUS SFNtReadRequestData(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, ULONG BufferSize, PULONG NumberOfBytesRead);
extern NTSTATUS SFNtCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
extern NTSTATUS SFNtQueryEvent(HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtWriteRequestData(HANDLE PortHandle, PPORT_MESSAGE Request, ULONG DataIndex, PVOID Buffer, ULONG Length, PULONG ResultLength);
extern NTSTATUS SFNtOpenDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtAccessCheckByTypeAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PULONG AccessStatus, PBOOLEAN GenerateOnClose);
extern NTSTATUS SFNtWaitForMultipleObjects(ULONG Count, PHANDLE Handles, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtSetInformationObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);
extern NTSTATUS SFNtCancelIoFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtTraceEvent(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
extern NTSTATUS SFNtPowerInformation(POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
extern NTSTATUS SFNtSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID SystemData, ULONG DataSize);
extern NTSTATUS SFNtCancelTimer(HANDLE TimerHandle, PBOOLEAN CurrentState);
extern NTSTATUS SFNtSetTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN ResumeTimer, LONG Period, PBOOLEAN PreviousState);
extern NTSTATUS SFNtAccessCheckByType(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ULONG DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PULONG AccessStatus);
extern NTSTATUS SFNtAccessCheckByTypeResultList(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PULONG AccessStatus);
extern NTSTATUS SFNtAccessCheckByTypeResultListAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PULONG AccessStatus, PULONG GenerateOnClose);
extern NTSTATUS SFNtAccessCheckByTypeResultListAndAuditAlarmByHandle(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PULONG AccessStatus, PULONG GenerateOnClose);
extern NTSTATUS SFNtAcquireProcessActivityReference();
extern NTSTATUS SFNtAddAtomEx(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom, ULONG Flags);
extern NTSTATUS SFNtAddBootEntry(PBOOT_ENTRY BootEntry, PULONG Id);
extern NTSTATUS SFNtAddDriverEntry(PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);
extern NTSTATUS SFNtAdjustGroupsToken(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
extern NTSTATUS SFNtAdjustTokenClaimsAndDeviceGroups(HANDLE TokenHandle, BOOLEAN UserResetToDefault, BOOLEAN DeviceResetToDefault, BOOLEAN DeviceGroupsResetToDefault, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState, PTOKEN_GROUPS NewDeviceGroupsState, ULONG UserBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState, ULONG DeviceBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState, ULONG DeviceGroupsBufferLength, PTOKEN_GROUPS PreviousDeviceGroups, PULONG UserReturnLength, PULONG DeviceReturnLength, PULONG DeviceGroupsReturnBufferLength);
extern NTSTATUS SFNtAlertResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
extern NTSTATUS SFNtAlertThread(HANDLE ThreadHandle);
extern NTSTATUS SFNtAlertThreadByThreadId(ULONG ThreadId);
extern NTSTATUS SFNtAllocateLocallyUniqueId(PLUID Luid);
extern NTSTATUS SFNtAllocateReserveObject(PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);
extern NTSTATUS SFNtAllocateUserPhysicalPages(HANDLE ProcessHandle, PULONG NumberOfPages, PULONG UserPfnArray);
extern NTSTATUS SFNtAllocateUuids(PLARGE_INTEGER Time, PULONG Range, PULONG Sequence, PUCHAR Seed);
extern NTSTATUS SFNtAllocateVirtualMemoryEx(HANDLE ProcessHandle, PPVOID lpAddress, ULONG_PTR ZeroBits, PSIZE_T pSize, ULONG flAllocationType, PVOID DataBuffer, ULONG DataCount);
extern NTSTATUS SFNtAlpcAcceptConnectPort(PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);
extern NTSTATUS SFNtAlpcCancelMessage(HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);
extern NTSTATUS SFNtAlpcConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtAlpcConnectPortEx(PHANDLE PortHandle, POBJECT_ATTRIBUTES ConnectionPortObjectAttributes, POBJECT_ATTRIBUTES ClientPortObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSECURITY_DESCRIPTOR ServerSecurityRequirements, PPORT_MESSAGE ConnectionMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtAlpcCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);
extern NTSTATUS SFNtAlpcCreatePortSection(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PHANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);
extern NTSTATUS SFNtAlpcCreateResourceReserve(HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PHANDLE ResourceId);
extern NTSTATUS SFNtAlpcCreateSectionView(HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);
extern NTSTATUS SFNtAlpcCreateSecurityContext(HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);
extern NTSTATUS SFNtAlpcDeletePortSection(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle);
extern NTSTATUS SFNtAlpcDeleteResourceReserve(HANDLE PortHandle, ULONG Flags, HANDLE ResourceId);
extern NTSTATUS SFNtAlpcDeleteSectionView(HANDLE PortHandle, ULONG Flags, PVOID ViewBase);
extern NTSTATUS SFNtAlpcDeleteSecurityContext(HANDLE PortHandle, ULONG Flags, HANDLE ContextHandle);
extern NTSTATUS SFNtAlpcDisconnectPort(HANDLE PortHandle, ULONG Flags);
extern NTSTATUS SFNtAlpcImpersonateClientContainerOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG Flags);
extern NTSTATUS SFNtAlpcImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags);
extern NTSTATUS SFNtAlpcOpenSenderProcess(PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtAlpcOpenSenderThread(PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtAlpcQueryInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
extern NTSTATUS SFNtAlpcQueryInformationMessage(HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);
extern NTSTATUS SFNtAlpcRevokeSecurityContext(HANDLE PortHandle, ULONG Flags, HANDLE ContextHandle);
extern NTSTATUS SFNtAlpcSendWaitReceivePort(HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtAlpcSetInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);
extern NTSTATUS SFNtAreMappedFilesTheSame(PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);
extern NTSTATUS SFNtAssignProcessToJobObject(HANDLE JobHandle, HANDLE ProcessHandle);
extern NTSTATUS SFNtAssociateWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, HANDLE IoCompletionHandle, HANDLE TargetObjectHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation, PBOOLEAN AlreadySignaled);
extern NTSTATUS SFNtCallEnclave(PENCLAVE_ROUTINE Routine, PVOID Parameter, BOOLEAN WaitForThread, PVOID ReturnValue);
extern NTSTATUS SFNtCancelIoFileEx(HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtCancelSynchronousIoFile(HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtCancelTimer2(HANDLE TimerHandle, PT2_CANCEL_PARAMETERS Parameters);
extern NTSTATUS SFNtCancelWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, BOOLEAN RemoveSignaledPacket);
extern NTSTATUS SFNtCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtCommitRegistryTransaction(HANDLE RegistryHandle, BOOL Wait);
extern NTSTATUS SFNtCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
extern NTSTATUS SFNtCompactKeys(ULONG Count, HANDLE KeyArray);
extern NTSTATUS SFNtCompareObjects(HANDLE FirstObjectHandle, HANDLE SecondObjectHandle);
extern NTSTATUS SFNtCompareSigningLevels(ULONG UnknownParameter1, ULONG UnknownParameter2);
extern NTSTATUS SFNtCompareTokens(HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);
extern NTSTATUS SFNtCompleteConnectPort(HANDLE PortHandle);
extern NTSTATUS SFNtCompressKey(HANDLE Key);
extern NTSTATUS SFNtConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_SECTION_WRITE ClientView, PPORT_SECTION_READ ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
extern NTSTATUS SFNtConvertBetweenAuxiliaryCounterAndPerformanceCounter(ULONG UnknownParameter1, ULONG UnknownParameter2, ULONG UnknownParameter3, ULONG UnknownParameter4);
extern NTSTATUS SFNtCreateDebugObject(PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
extern NTSTATUS SFNtCreateDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtCreateDirectoryObjectEx(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ShadowDirectoryHandle, ULONG Flags);
extern NTSTATUS SFNtCreateEnclave(HANDLE ProcessHandle, PVOID BaseAddress, ULONG_PTR ZeroBits, SIZE_T Size, SIZE_T InitialCommitment, ULONG EnclaveType, PVOID EnclaveInformation, ULONG EnclaveInformationLength, PULONG EnclaveError);
extern NTSTATUS SFNtCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
extern NTSTATUS SFNtCreateEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtCreateIRTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess);
extern NTSTATUS SFNtCreateIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);
extern NTSTATUS SFNtCreateJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtCreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
extern NTSTATUS SFNtCreateKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);
extern NTSTATUS SFNtCreateKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
extern NTSTATUS SFNtCreateLowBoxToken(PHANDLE TokenHandle, HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PSID PackageSid, ULONG CapabilityCount, PSID_AND_ATTRIBUTES Capabilities, ULONG HandleCount, HANDLE Handles);
extern NTSTATUS SFNtCreateMailslotFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);
extern NTSTATUS SFNtCreateMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);
extern NTSTATUS SFNtCreateNamedPipeFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, BOOLEAN NamedPipeType, BOOLEAN ReadMode, BOOLEAN CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
extern NTSTATUS SFNtCreatePagingFile(PUNICODE_STRING PageFileName, PULARGE_INTEGER MinimumSize, PULARGE_INTEGER MaximumSize, ULONG Priority);
extern NTSTATUS SFNtCreatePartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG PreferredNode);
extern NTSTATUS SFNtCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
extern NTSTATUS SFNtCreatePrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
extern NTSTATUS SFNtCreateProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);
extern NTSTATUS SFNtCreateProfile(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, ULONG ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG Affinity);
extern NTSTATUS SFNtCreateProfileEx(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, USHORT GroupCount, PGROUP_AFFINITY GroupAffinity);
extern NTSTATUS SFNtCreateRegistryTransaction(PHANDLE Handle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, DWORD Flags);
extern NTSTATUS SFNtCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
extern NTSTATUS SFNtCreateSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);
extern NTSTATUS SFNtCreateSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);
extern NTSTATUS SFNtCreateThreadEx(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);
extern NTSTATUS SFNtCreateTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);
extern NTSTATUS SFNtCreateTimer2(PHANDLE TimerHandle, PVOID Reserved1, PVOID Reserved2, ULONG Attributes, ACCESS_MASK DesiredAccess);
extern NTSTATUS SFNtCreateToken(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
extern NTSTATUS SFNtCreateTokenEx(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes, PTOKEN_GROUPS DeviceGroups, PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
extern NTSTATUS SFNtCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);
extern NTSTATUS SFNtCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);
extern NTSTATUS SFNtCreateUserProcess(PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PVOID ProcessParameters, PPS_CREATE_INFO CreateInfo, PPS_ATTRIBUTE_LIST AttributeList);
extern NTSTATUS SFNtCreateWaitCompletionPacket(PHANDLE WaitCompletionPacketHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtCreateWaitablePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
extern NTSTATUS SFNtCreateWnfStateName(PCWNF_STATE_NAME StateName, WNF_STATE_NAME_LIFETIME NameLifetime, WNF_DATA_SCOPE DataScope, BOOLEAN PersistData, PCWNF_TYPE_ID TypeId, ULONG MaximumStateSize, PSECURITY_DESCRIPTOR SecurityDescriptor);
extern NTSTATUS SFNtCreateWorkerFactory(PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);
extern NTSTATUS SFNtDebugActiveProcess(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
extern NTSTATUS SFNtDebugContinue(HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);
extern NTSTATUS SFNtDeleteAtom(USHORT Atom);
extern NTSTATUS SFNtDeleteBootEntry(ULONG Id);
extern NTSTATUS SFNtDeleteDriverEntry(ULONG Id);
extern NTSTATUS SFNtDeleteFile(POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtDeleteKey(HANDLE KeyHandle);
extern NTSTATUS SFNtDeleteObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
extern NTSTATUS SFNtDeletePrivateNamespace(HANDLE NamespaceHandle);
extern NTSTATUS SFNtDeleteValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName);
extern NTSTATUS SFNtDeleteWnfStateData(PCWNF_STATE_NAME StateName, PVOID ExplicitScope);
extern NTSTATUS SFNtDeleteWnfStateName(PCWNF_STATE_NAME StateName);
extern NTSTATUS SFNtDisableLastKnownGood();
extern NTSTATUS SFNtDisplayString(PUNICODE_STRING String);
extern NTSTATUS SFNtDrawText(PUNICODE_STRING String);
extern NTSTATUS SFNtEnableLastKnownGood();
extern NTSTATUS SFNtEnumerateBootEntries(PVOID Buffer, PULONG BufferLength);
extern NTSTATUS SFNtEnumerateDriverEntries(PVOID Buffer, PULONG BufferLength);
extern NTSTATUS SFNtEnumerateSystemEnvironmentValuesEx(ULONG InformationClass, PVOID Buffer, PULONG BufferLength);
extern NTSTATUS SFNtEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
extern NTSTATUS SFNtExtendSection(HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);
extern NTSTATUS SFNtFilterBootOption(FILTER_BOOT_OPTION_OPERATION FilterOperation, ULONG ObjectType, ULONG ElementType, PVOID SystemData, ULONG DataSize);
extern NTSTATUS SFNtFilterToken(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
extern NTSTATUS SFNtFilterTokenEx(HANDLE TokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, ULONG DisableUserClaimsCount, PUNICODE_STRING UserClaimsToDisable, ULONG DisableDeviceClaimsCount, PUNICODE_STRING DeviceClaimsToDisable, PTOKEN_GROUPS DeviceGroupsToDisable, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes, PTOKEN_GROUPS RestrictedDeviceGroups, PHANDLE NewTokenHandle);
extern NTSTATUS SFNtFlushBuffersFileEx(HANDLE FileHandle, ULONG Flags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtFlushInstallUILanguage(LANGID InstallUILanguage, ULONG SetComittedFlag);
extern NTSTATUS SFNtFlushInstructionCache(HANDLE ProcessHandle, PVOID BaseAddress, ULONG Length);
extern NTSTATUS SFNtFlushKey(HANDLE KeyHandle);
extern NTSTATUS SFNtFlushProcessWriteBuffers();
extern NTSTATUS SFNtFlushVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PULONG RegionSize, PIO_STATUS_BLOCK IoStatusBlock);
extern NTSTATUS SFNtFlushWriteBuffer();
extern NTSTATUS SFNtFreeUserPhysicalPages(HANDLE ProcessHandle, PULONG NumberOfPages, PULONG UserPfnArray);
extern NTSTATUS SFNtFreezeRegistry(ULONG TimeOutInSeconds);
extern NTSTATUS SFNtFreezeTransactions(PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);
extern NTSTATUS SFNtGetCachedSigningLevel(HANDLE File, PULONG Flags, PSE_SIGNING_LEVEL SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm);
extern NTSTATUS SFNtGetCompleteWnfStateSubscription(PCWNF_STATE_NAME OldDescriptorStateName, PLARGE_INTEGER OldSubscriptionId, ULONG OldDescriptorEventMask, ULONG OldDescriptorStatus, PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor, ULONG DescriptorSize);
extern NTSTATUS SFNtGetContextThread(HANDLE ThreadHandle, PCONTEXT ThreadContext);
extern NTSTATUS SFNtGetCurrentProcessorNumber();
extern NTSTATUS SFNtGetCurrentProcessorNumberEx(PULONG ProcNumber);
extern NTSTATUS SFNtGetDevicePowerState(HANDLE Device, PDEVICE_POWER_STATE State);
extern NTSTATUS SFNtGetMUIRegistryInfo(ULONG Flags, PULONG DataSize, PVOID SystemData);
extern NTSTATUS SFNtGetNextProcess(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);
extern NTSTATUS SFNtGetNextThread(HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);
extern NTSTATUS SFNtGetNlsSectionPtr(ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID SectionPointer, PULONG SectionSize);
extern NTSTATUS SFNtGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG AsynchronousContext);
extern NTSTATUS SFNtGetWriteWatch(HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, ULONG RegionSize, PULONG UserAddressArray, PULONG EntriesInUserAddressArray, PULONG Granularity);
extern NTSTATUS SFNtImpersonateAnonymousToken(HANDLE ThreadHandle);
extern NTSTATUS SFNtImpersonateThread(HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);
extern NTSTATUS SFNtInitializeEnclave(HANDLE ProcessHandle, PVOID BaseAddress, PVOID EnclaveInformation, ULONG EnclaveInformationLength, PULONG EnclaveError);
extern NTSTATUS SFNtInitializeNlsFiles(PVOID BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);
extern NTSTATUS SFNtInitializeRegistry(USHORT BootCondition);
extern NTSTATUS SFNtInitiatePowerAction(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous);
extern NTSTATUS SFNtIsSystemResumeAutomatic();
extern NTSTATUS SFNtIsUILanguageComitted();
extern NTSTATUS SFNtListenPort(HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);
extern NTSTATUS SFNtLoadDriver(PUNICODE_STRING DriverServiceName);
extern NTSTATUS SFNtLoadEnclaveData(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, ULONG Protect, PVOID PageInformation, ULONG PageInformationLength, PSIZE_T NumberOfBytesWritten, PULONG EnclaveError);
extern NTSTATUS SFNtLoadHotPatch(PUNICODE_STRING HotPatchName, ULONG LoadFlag);
extern NTSTATUS SFNtLoadKey(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);
extern NTSTATUS SFNtLoadKey2(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);
extern NTSTATUS SFNtLoadKeyEx(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey, HANDLE Event, ACCESS_MASK DesiredAccess, PHANDLE RootHandle, PIO_STATUS_BLOCK IoStatus);
extern NTSTATUS SFNtLockFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PULARGE_INTEGER ByteOffset, PULARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);
extern NTSTATUS SFNtLockProductActivationKeys(PULONG pPrivateVer, PULONG pSafeMode);
extern NTSTATUS SFNtLockRegistryKey(HANDLE KeyHandle);
extern NTSTATUS SFNtLockVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PULONG RegionSize, ULONG MapType);
extern NTSTATUS SFNtMakePermanentObject(HANDLE Handle);
extern NTSTATUS SFNtMakeTemporaryObject(HANDLE Handle);
extern NTSTATUS SFNtManagePartition(HANDLE TargetHandle, HANDLE SourceHandle, MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength);
extern NTSTATUS SFNtMapCMFModule(ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID BaseAddress);
extern NTSTATUS SFNtMapUserPhysicalPages(PVOID VirtualAddress, PULONG NumberOfPages, PULONG UserPfnArray);
extern NTSTATUS SFNtMapViewOfSectionEx(HANDLE SectionHandle, HANDLE ProcessHandle, PLARGE_INTEGER SectionOffset, PPVOID BaseAddress, PSIZE_T ViewSize, ULONG AllocationType, ULONG Protect, PVOID DataBuffer, ULONG DataCount);
extern NTSTATUS SFNtModifyBootEntry(PBOOT_ENTRY BootEntry);
extern NTSTATUS SFNtModifyDriverEntry(PEFI_DRIVER_ENTRY DriverEntry);
extern NTSTATUS SFNtNotifyChangeDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_NOTIFY_INFORMATION Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);
extern NTSTATUS SFNtNotifyChangeDirectoryFileEx(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree, DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass);
extern NTSTATUS SFNtNotifyChangeKey(HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
extern NTSTATUS SFNtNotifyChangeMultipleKeys(HANDLE MasterKeyHandle, ULONG Count, POBJECT_ATTRIBUTES SubordinateObjects, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
extern NTSTATUS SFNtNotifyChangeSession(HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, PVOID Payload, ULONG PayloadSize);
extern NTSTATUS SFNtOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenKeyEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);
extern NTSTATUS SFNtOpenKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);
extern NTSTATUS SFNtOpenKeyTransactedEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);
extern NTSTATUS SFNtOpenKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);
extern NTSTATUS SFNtOpenPartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenPrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
extern NTSTATUS SFNtOpenProcessToken(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
extern NTSTATUS SFNtOpenRegistryTransaction(PHANDLE RegistryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenSession(PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
extern NTSTATUS SFNtOpenTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
extern NTSTATUS SFNtOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
extern NTSTATUS SFNtOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
extern NTSTATUS SFNtPlugPlayControl(PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);
extern NTSTATUS SFNtPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtPrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
extern NTSTATUS SFNtPrivilegeObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
extern NTSTATUS SFNtPrivilegedServiceAuditAlarm(PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
extern NTSTATUS SFNtPropagationComplete(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
extern NTSTATUS SFNtPropagationFailed(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
extern NTSTATUS SFNtPulseEvent(HANDLE EventHandle, PULONG PreviousState);
extern NTSTATUS SFNtQueryAuxiliaryCounterFrequency(PULONGLONG lpAuxiliaryCounterFrequency);
extern NTSTATUS SFNtQueryBootEntryOrder(PULONG Ids, PULONG Count);
extern NTSTATUS SFNtQueryBootOptions(PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);
extern NTSTATUS SFNtQueryDebugFilterState(ULONG ComponentId, ULONG Level);
extern NTSTATUS SFNtQueryDirectoryFileEx(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG QueryFlags, PUNICODE_STRING FileName);
extern NTSTATUS SFNtQueryDirectoryObject(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
extern NTSTATUS SFNtQueryDriverEntryOrder(PULONG Ids, PULONG Count);
extern NTSTATUS SFNtQueryEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PFILE_FULL_EA_INFORMATION Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PFILE_GET_EA_INFORMATION EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);
extern NTSTATUS SFNtQueryFullAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);
extern NTSTATUS SFNtQueryInformationAtom(USHORT Atom, ATOM_INFORMATION_CLASS AtomInformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationByName(POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
extern NTSTATUS SFNtQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationPort(HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryInstallUILanguage(PLANGID InstallUILanguageId);
extern NTSTATUS SFNtQueryIntervalProfile(KPROFILE_SOURCE ProfileSource, PULONG Interval);
extern NTSTATUS SFNtQueryIoCompletion(HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryLicenseValue(PUNICODE_STRING ValueName, PULONG Type, PVOID SystemData, ULONG DataSize, PULONG ResultDataSize);
extern NTSTATUS SFNtQueryMultipleValueKey(HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);
extern NTSTATUS SFNtQueryMutant(HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryOpenSubKeys(POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);
extern NTSTATUS SFNtQueryOpenSubKeysEx(POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);
extern NTSTATUS SFNtQueryPortInformationProcess();
extern NTSTATUS SFNtQueryQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PFILE_USER_QUOTA_INFORMATION Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PFILE_QUOTA_LIST_INFORMATION SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan);
extern NTSTATUS SFNtQuerySecurityAttributesToken(HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);
extern NTSTATUS SFNtQuerySecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
extern NTSTATUS SFNtQuerySecurityPolicy(ULONG_PTR UnknownParameter1, ULONG_PTR UnknownParameter2, ULONG_PTR UnknownParameter3, ULONG_PTR UnknownParameter4, ULONG_PTR UnknownParameter5, ULONG_PTR UnknownParameter6);
extern NTSTATUS SFNtQuerySemaphore(HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQuerySymbolicLinkObject(HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);
extern NTSTATUS SFNtQuerySystemEnvironmentValue(PUNICODE_STRING VariableName, PVOID VariableValue, ULONG ValueLength, PULONG ReturnLength);
extern NTSTATUS SFNtQuerySystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);
extern NTSTATUS SFNtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtQueryTimerResolution(PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);
extern NTSTATUS SFNtQueryWnfStateData(PCWNF_STATE_NAME StateName, PCWNF_TYPE_ID TypeId, PVOID ExplicitScope, PWNF_CHANGE_STAMP ChangeStamp, PVOID Buffer, PULONG BufferSize);
extern NTSTATUS SFNtQueryWnfStateNameInformation(PCWNF_STATE_NAME StateName, PCWNF_TYPE_ID NameInfoClass, PVOID ExplicitScope, PVOID InfoBuffer, ULONG InfoBufferSize);
extern NTSTATUS SFNtQueueApcThreadEx(HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PKNORMAL_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
extern NTSTATUS SFNtRaiseException(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);
extern NTSTATUS SFNtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);
extern NTSTATUS SFNtReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
extern NTSTATUS SFNtRecoverResourceManager(HANDLE ResourceManagerHandle);
extern NTSTATUS SFNtRecoverTransactionManager(HANDLE TransactionManagerHandle);
extern NTSTATUS SFNtRegisterProtocolAddressInformation(HANDLE ResourceManager, LPGUID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
extern NTSTATUS SFNtRegisterThreadTerminatePort(HANDLE PortHandle);
extern NTSTATUS SFNtReleaseKeyedEvent(HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtReleaseWorkerFactoryWorker(HANDLE WorkerFactoryHandle);
extern NTSTATUS SFNtRemoveIoCompletionEx(HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);
extern NTSTATUS SFNtRemoveProcessDebug(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
extern NTSTATUS SFNtRenameKey(HANDLE KeyHandle, PUNICODE_STRING NewName);
extern NTSTATUS SFNtRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
extern NTSTATUS SFNtReplaceKey(POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);
extern NTSTATUS SFNtReplacePartitionUnit(PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);
extern NTSTATUS SFNtReplyWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
extern NTSTATUS SFNtRequestPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage);
extern NTSTATUS SFNtResetEvent(HANDLE EventHandle, PULONG PreviousState);
extern NTSTATUS SFNtResetWriteWatch(HANDLE ProcessHandle, PVOID BaseAddress, ULONG RegionSize);
extern NTSTATUS SFNtRestoreKey(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);
extern NTSTATUS SFNtResumeProcess(HANDLE ProcessHandle);
extern NTSTATUS SFNtRevertContainerImpersonation();
extern NTSTATUS SFNtRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtRollbackRegistryTransaction(HANDLE RegistryHandle, BOOL Wait);
extern NTSTATUS SFNtRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
extern NTSTATUS SFNtRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtSaveKey(HANDLE KeyHandle, HANDLE FileHandle);
extern NTSTATUS SFNtSaveKeyEx(HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);
extern NTSTATUS SFNtSaveMergedKeys(HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);
extern NTSTATUS SFNtSecureConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_SECTION_WRITE ClientView, PSID RequiredServerSid, PPORT_SECTION_READ ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
extern NTSTATUS SFNtSerializeBoot();
extern NTSTATUS SFNtSetBootEntryOrder(PULONG Ids, ULONG Count);
extern NTSTATUS SFNtSetBootOptions(PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);
extern NTSTATUS SFNtSetCachedSigningLevel(ULONG Flags, SE_SIGNING_LEVEL InputSigningLevel, PHANDLE SourceFiles, ULONG SourceFileCount, HANDLE TargetFile);
extern NTSTATUS SFNtSetCachedSigningLevel2(ULONG Flags, ULONG InputSigningLevel, PHANDLE SourceFiles, ULONG SourceFileCount, HANDLE TargetFile, PVOID LevelInformation);
extern NTSTATUS SFNtSetContextThread(HANDLE ThreadHandle, PCONTEXT Context);
extern NTSTATUS SFNtSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
extern NTSTATUS SFNtSetDefaultHardErrorPort(HANDLE PortHandle);
extern NTSTATUS SFNtSetDefaultLocale(BOOLEAN UserProfile, LCID DefaultLocaleId);
extern NTSTATUS SFNtSetDefaultUILanguage(LANGID DefaultUILanguageId);
extern NTSTATUS SFNtSetDriverEntryOrder(PULONG Ids, PULONG Count);
extern NTSTATUS SFNtSetEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PFILE_FULL_EA_INFORMATION EaBuffer, ULONG EaBufferSize);
extern NTSTATUS SFNtSetHighEventPair(HANDLE EventPairHandle);
extern NTSTATUS SFNtSetHighWaitLowEventPair(HANDLE EventPairHandle);
extern NTSTATUS SFNtSetIRTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime);
extern NTSTATUS SFNtSetInformationDebugObject(HANDLE DebugObject, DEBUGOBJECTINFOCLASS InformationClass, PVOID Information, ULONG InformationLength, PULONG ReturnLength);
extern NTSTATUS SFNtSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
extern NTSTATUS SFNtSetInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);
extern NTSTATUS SFNtSetInformationKey(HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);
extern NTSTATUS SFNtSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
extern NTSTATUS SFNtSetInformationSymbolicLink(HANDLE Handle, ULONG Class, PVOID Buffer, ULONG BufferLength);
extern NTSTATUS SFNtSetInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);
extern NTSTATUS SFNtSetInformationTransaction(HANDLE TransactionHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
extern NTSTATUS SFNtSetInformationTransactionManager(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
extern NTSTATUS SFNtSetInformationVirtualMemory(HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength);
extern NTSTATUS SFNtSetInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);
extern NTSTATUS SFNtSetIntervalProfile(ULONG Interval, KPROFILE_SOURCE Source);
extern NTSTATUS SFNtSetIoCompletion(HANDLE IoCompletionHandle, ULONG CompletionKey, PIO_STATUS_BLOCK IoStatusBlock, NTSTATUS CompletionStatus, ULONG NumberOfBytesTransfered);
extern NTSTATUS SFNtSetIoCompletionEx(HANDLE IoCompletionHandle, HANDLE IoCompletionPacketHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);
extern NTSTATUS SFNtSetLdtEntries(ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);
extern NTSTATUS SFNtSetLowEventPair(HANDLE EventPairHandle);
extern NTSTATUS SFNtSetLowWaitHighEventPair(HANDLE EventPairHandle);
extern NTSTATUS SFNtSetQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PFILE_USER_QUOTA_INFORMATION Buffer, ULONG Length);
extern NTSTATUS SFNtSetSecurityObject(HANDLE ObjectHandle, SECURITY_INFORMATION SecurityInformationClass, PSECURITY_DESCRIPTOR DescriptorBuffer);
extern NTSTATUS SFNtSetSystemEnvironmentValue(PUNICODE_STRING VariableName, PUNICODE_STRING Value);
extern NTSTATUS SFNtSetSystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);
extern NTSTATUS SFNtSetSystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);
extern NTSTATUS SFNtSetSystemPowerState(POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);
extern NTSTATUS SFNtSetSystemTime(PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);
extern NTSTATUS SFNtSetThreadExecutionState(EXECUTION_STATE ExecutionState, PEXECUTION_STATE PreviousExecutionState);
extern NTSTATUS SFNtSetTimer2(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PLARGE_INTEGER Period, PT2_SET_PARAMETERS Parameters);
extern NTSTATUS SFNtSetTimerEx(HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);
extern NTSTATUS SFNtSetTimerResolution(ULONG DesiredResolution, BOOLEAN SetResolution, PULONG CurrentResolution);
extern NTSTATUS SFNtSetUuidSeed(PUCHAR Seed);
extern NTSTATUS SFNtSetVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileSystemInformation, ULONG Length, FSINFOCLASS FileSystemInformationClass);
extern NTSTATUS SFNtSetWnfProcessNotificationEvent(HANDLE NotificationEvent);
extern NTSTATUS SFNtShutdownSystem(SHUTDOWN_ACTION Action);
extern NTSTATUS SFNtShutdownWorkerFactory(HANDLE WorkerFactoryHandle, PLONG PendingWorkerCount);
extern NTSTATUS SFNtSignalAndWaitForSingleObject(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, BOOLEAN bAlertable, PLARGE_INTEGER dwMilliseconds);
extern NTSTATUS SFNtSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtStartProfile(HANDLE ProfileHandle);
extern NTSTATUS SFNtStopProfile(HANDLE ProfileHandle);
extern NTSTATUS SFNtSubscribeWnfStateChange(PCWNF_STATE_NAME StateName, WNF_CHANGE_STAMP ChangeStamp, ULONG EventMask, PLARGE_INTEGER SubscriptionId);
extern NTSTATUS SFNtSuspendProcess(HANDLE ProcessHandle);
extern NTSTATUS SFNtSuspendThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
extern NTSTATUS SFNtSystemDebugControl(DEBUG_CONTROL_CODE Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);
extern NTSTATUS SFNtTerminateEnclave(PVOID BaseAddress, BOOLEAN WaitForThread);
extern NTSTATUS SFNtTerminateJobObject(HANDLE JobHandle, NTSTATUS ExitStatus);
extern NTSTATUS SFNtTestAlert();
extern NTSTATUS SFNtThawRegistry();
extern NTSTATUS SFNtThawTransactions();
extern NTSTATUS SFNtTraceControl(ULONG FunctionCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);
extern NTSTATUS SFNtTranslateFilePath(PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);
extern NTSTATUS SFNtUmsThreadYield(PVOID SchedulerParam);
extern NTSTATUS SFNtUnloadDriver(PUNICODE_STRING DriverServiceName);
extern NTSTATUS SFNtUnloadKey(POBJECT_ATTRIBUTES DestinationKeyName);
extern NTSTATUS SFNtUnloadKey2(POBJECT_ATTRIBUTES TargetKey, ULONG Flags);
extern NTSTATUS SFNtUnloadKeyEx(POBJECT_ATTRIBUTES TargetKey, HANDLE Event);
extern NTSTATUS SFNtUnlockFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PULARGE_INTEGER ByteOffset, PULARGE_INTEGER Length, ULONG Key);
extern NTSTATUS SFNtUnlockVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T NumberOfBytesToUnlock, ULONG LockType);
extern NTSTATUS SFNtUnmapViewOfSectionEx(HANDLE ProcessHandle, PVOID BaseAddress, ULONG Flags);
extern NTSTATUS SFNtUnsubscribeWnfStateChange(PCWNF_STATE_NAME StateName);
extern NTSTATUS SFNtUpdateWnfStateData(PCWNF_STATE_NAME StateName, PVOID Buffer, ULONG Length, PCWNF_TYPE_ID TypeId, PVOID ExplicitScope, WNF_CHANGE_STAMP MatchingChangeStamp, ULONG CheckStamp);
extern NTSTATUS SFNtVdmControl(VDMSERVICECLASS Service, PVOID ServiceData);
extern NTSTATUS SFNtWaitForAlertByThreadId(HANDLE Handle, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtWaitForDebugEvent(HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PVOID WaitStateChange);
extern NTSTATUS SFNtWaitForKeyedEvent(HANDLE KeyedEventHandle, PVOID Key, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
extern NTSTATUS SFNtWaitForWorkViaWorkerFactory(HANDLE WorkerFactoryHandle, PVOID MiniPacket);
extern NTSTATUS SFNtWaitHighEventPair(HANDLE EventHandle);
extern NTSTATUS SFNtWaitLowEventPair(HANDLE EventHandle);
extern NTSTATUS SFNtAcquireCMFViewOwnership(BOOLEAN TimeStamp, BOOLEAN TokenTaken, BOOLEAN ReplaceExisting);
extern NTSTATUS SFNtCancelDeviceWakeupRequest(HANDLE DeviceHandle);
extern NTSTATUS SFNtClearAllSavepointsTransaction(HANDLE TransactionHandle);
extern NTSTATUS SFNtClearSavepointTransaction(HANDLE TransactionHandle, ULONG SavePointId);
extern NTSTATUS SFNtRollbackSavepointTransaction(HANDLE TransactionHandle, ULONG SavePointId);
extern NTSTATUS SFNtSavepointTransaction(HANDLE TransactionHandle, BOOLEAN Flag, ULONG SavePointId);
extern NTSTATUS SFNtSavepointComplete(HANDLE TransactionHandle, PLARGE_INTEGER TmVirtualClock);
extern NTSTATUS SFNtCreateSectionEx(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParametersCount);
extern NTSTATUS SFNtCreateCrossVmEvent();
//extern NTSTATUS SFNtGetPlugPlayEvent(HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);
extern NTSTATUS SFNtListTransactions();
extern NTSTATUS SFNtMarshallTransaction();
extern NTSTATUS SFNtPullTransaction();
extern NTSTATUS SFNtReleaseCMFViewOwnership();
extern NTSTATUS SFNtWaitForWnfNotifications();
extern NTSTATUS SFNtStartTm();
extern NTSTATUS SFNtSetInformationProcess(HANDLE DeviceHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG Length);
extern NTSTATUS SFNtRequestDeviceWakeup(HANDLE DeviceHandle);
extern NTSTATUS SFNtRequestWakeupLatency(ULONG LatencyTime);
extern NTSTATUS SFNtQuerySystemTime(PLARGE_INTEGER SystemTime);
extern NTSTATUS SFNtManageHotPatch(ULONG UnknownParameter1, ULONG UnknownParameter2, ULONG UnknownParameter3, ULONG UnknownParameter4);
extern NTSTATUS SFNtContinueEx(PCONTEXT ContextRecord, PKCONTINUE_ARGUMENT ContinueArgument);

